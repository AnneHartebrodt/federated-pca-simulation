swagger: '2.0'
info:
  description: This is the API that a developer must implement when creating an AI or data preprocessor. This API will be used by the FeatureCloud Controller to control the workflow
  version: 1.0.1
  title: Controller To Docker API
  # put the contact info for your development or API team
  contact:
    email: featurecloud@featurecloud.eu

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

paths:
  /setup:
    post:
      summary: setup Docker for proper operation.
      description: This is used send configuration settings for the container
      parameters:
      - in: "header"
        name: "data"
        description: "Additional configuration data, JSON format"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
        405:
          description: "Invalid input"
        501:
          description: "Unexpected error"
  /start:
    post:
      summary: "Starts container operations"
      consumes:
      - "application/json"
      parameters:
      - in: "header"
        name: "data"
        description: "Additional data to pass to action, JSON format"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
        405:
          description: "Invalid input"
        501:
          description: "Unexpected error"
        502:
          description: "Action is waiting for input"
  /status:
    get:
      summary: get status of Docker container
      description: |
        Returns the current state of the Docker container
      produces:
      - application/json
      responses:
        200:
          description: current status
          schema:
            type: array
            items:
              $ref: '#/definitions/StatusResponse'
  /data:
    get:
      summary: get data from container
      produces:
      - application/json
      responses:
        200:
          description: the result of the action
          schema:
            type: array
            items:
              $ref: '#/definitions/ActionResult'
    put:
      summary: "Pass data to the container"
      description: "Used to pass data from slave into the container"
      parameters:
      - in: "header"
        name: "dataComplete"
        type: "integer"
        description: "0 - if data is to come, 1 - if all slaves has sent their data. Flag 1 needs to be used as a trigger for next action in the container"
        required: true
      - in: "header"
        name: "data"
        description: "Additional data to pass to action (sync data), JSON format"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Action not found"
        405:
          description: "Invalid input"
        501:
          description: "Unexpected error"
        502:
          description: "Action is waiting for input"
  /interrupt:
    post:
      summary: "Stop operations in container"
      description: "The purpose of this call is to interrupt container operations and it should put container in sync status."
      responses:
        200:
          description: "Successful operation"
        501:
          description: "Unexpected error"
  /log:
    get:
      summary: "Get current logs from container"
      parameters:
      - in: "path"
        name: "level"
        type: "string"
        enum: [info, warning, error, fatal]
        description: >
            Log level:
             * `info` - returns logs of info level and higher, in this case, everything
             * `warning` - returns logs of warning level and higher (warning, error, fatal)
             * `error` - returns logs of error level and higher (error, fatal)
             * `fatal` - returns logs of fatal level
        required: true
      responses:
        200:
          description: log dump
          schema:
            type: array
            items:
              $ref: '#/definitions/LogResponse'
definitions:
  StatusResponse:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
        description: 'Docker container id'
      status:
        type: "string"
        enum:
          - "init"
          - "waiting"
          - "sync"
          - "broadcast"
          - "running"
          - "paused"
          - "error"
          - "finished"
        description: |
          init - init state
          waiting - waiting for command
          sync - waiting for data from slaves, or to transmit data towards master
          broadcast - waiting to send data to slaves. Get data should follow.
          running - running action
          paused - paused action
          error - error state
          finished - finished action
      syncId:
        type: integer
        description: 'Current sync Id if applicable'
      data:
        type: "string"
        description: 'Additional data to pass back to controller if needed. E.q. when error state, data will contain error details'
  ActionResult:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
        description: 'Docker container id'
      data:
        type: string
        example: |
          {"result":"The result of the action in JSON format"}
  LogResponse:
    type: object
    properties:
      level:
        type: string
        enum: [info, warning, error, fatal]
        description: 'Log level'
      data:
        type: string
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /balazsorban/ControllerToDocker/1.0.1
schemes:
 - https
