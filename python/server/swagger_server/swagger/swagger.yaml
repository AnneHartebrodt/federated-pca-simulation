---
swagger: "2.0"
info:
  description: "This is the API that a developer must implement when creating an AI\
    \ or data preprocessor. This API will be used by the FeatureCloud Controller to\
    \ control the workflow"
  version: "1.0.1"
  title: "Controller To Docker API"
  contact:
    email: "featurecloud@featurecloud.eu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/1.0.1"
schemes:
- "https"
paths:
  /setup:
    post:
      summary: "setup Docker for proper operation."
      description: "This is used send configuration settings for the container"
      operationId: "setup_post"
      parameters:
      - name: "data"
        in: "header"
        description: "Additional configuration data, JSON format"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
        405:
          description: "Invalid input"
        501:
          description: "Unexpected error"
      x-swagger-router-controller: "server.swagger_server.controllers.default_controller"
  /start:
    post:
      summary: "Starts container operations"
      operationId: "start_post"
      consumes:
      - "application/json"
      parameters:
      - name: "data"
        in: "header"
        description: "Additional data to pass to action, JSON format"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
        405:
          description: "Invalid input"
        501:
          description: "Unexpected error"
        502:
          description: "Action is waiting for input"
      x-swagger-router-controller: "server.swagger_server.controllers.default_controller"
  /status:
    get:
      summary: "get status of Docker container"
      description: "Returns the current state of the Docker container\n"
      operationId: "status_get"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "current status"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StatusResponse"
      x-swagger-router-controller: "server.swagger_server.controllers.default_controller"
  /data:
    get:
      summary: "get data from container"
      operationId: "data_get"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "the result of the action"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ActionResult"
      x-swagger-router-controller: "server.swagger_server.controllers.default_controller"
    put:
      summary: "Pass data to the container"
      description: "Used to pass data from slave into the container"
      operationId: "data_put"
      parameters:
      - name: "dataComplete"
        in: "header"
        description: "0 - if data is to come, 1 - if all slaves has sent their data.\
          \ Flag 1 needs to be used as a trigger for next action in the container"
        required: true
        type: "integer"
      - name: "data"
        in: "header"
        description: "Additional data to pass to action (sync data), JSON format"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Action not found"
        405:
          description: "Invalid input"
        501:
          description: "Unexpected error"
        502:
          description: "Action is waiting for input"
      x-swagger-router-controller: "server.swagger_server.controllers.default_controller"
  /interrupt:
    post:
      summary: "Stop operations in container"
      description: "The purpose of this call is to interrupt container operations\
        \ and it should put container in sync status."
      operationId: "interrupt_post"
      parameters: []
      responses:
        200:
          description: "Successful operation"
        501:
          description: "Unexpected error"
      x-swagger-router-controller: "server.swagger_server.controllers.default_controller"
  /log:
    get:
      summary: "Get current logs from container"
      operationId: "log_get"
      parameters:
      - name: "level"
        in: "path"
        description: "Log level:\n * `info` - returns logs of info level and higher,\
          \ in this case, everything\n * `warning` - returns logs of warning level\
          \ and higher (warning, error, fatal)\n * `error` - returns logs of error\
          \ level and higher (error, fatal)\n * `fatal` - returns logs of fatal level\n"
        required: true
        type: "string"
        enum:
        - "info"
        - "warning"
        - "error"
        - "fatal"
      responses:
        200:
          description: "log dump"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LogResponse"
      x-swagger-router-controller: "server.swagger_server.controllers.default_controller"
definitions:
  StatusResponse:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        description: "Docker container id"
      status:
        type: "string"
        description: "init - init state\nwaiting - waiting for command\nsync - waiting\
          \ for data from slaves, or to transmit data towards master\nbroadcast -\
          \ waiting to send data to slaves. Get data should follow.\nrunning - running\
          \ action\npaused - paused action\nerror - error state\nfinished - finished\
          \ action\n"
        enum:
        - "init"
        - "waiting"
        - "sync"
        - "broadcast"
        - "running"
        - "paused"
        - "error"
        - "finished"
      syncId:
        type: "integer"
        description: "Current sync Id if applicable"
      data:
        type: "string"
        description: "Additional data to pass back to controller if needed. E.q. when\
          \ error state, data will contain error details"
    example:
      data: "data"
      id: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      status: "init"
      syncId: 0
  ActionResult:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        description: "Docker container id"
      data:
        type: "string"
        example: "{\"result\":\"The result of the action in JSON format\"}\n"
    example:
      data: "{\"result\":\"The result of the action in JSON format\"}\n"
      id: "d290f1ee-6c54-4b01-90e6-d701748f0851"
  LogResponse:
    type: "object"
    properties:
      level:
        type: "string"
        description: "Log level"
        enum:
        - "info"
        - "warning"
        - "error"
        - "fatal"
      data:
        type: "string"
    example:
      data: "data"
      level: "info"
