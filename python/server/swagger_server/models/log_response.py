# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.swagger_server.models.base_model_ import Model
from server.swagger_server import util


class LogResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, level: str=None, data: str=None):  # noqa: E501
        """LogResponse - a model defined in Swagger

        :param level: The level of this LogResponse.  # noqa: E501
        :type level: str
        :param data: The data of this LogResponse.  # noqa: E501
        :type data: str
        """
        self.swagger_types = {
            'level': str,
            'data': str
        }

        self.attribute_map = {
            'level': 'level',
            'data': 'data'
        }

        self._level = level
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'LogResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LogResponse of this LogResponse.  # noqa: E501
        :rtype: LogResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def level(self) -> str:
        """Gets the level of this LogResponse.

        Log level  # noqa: E501

        :return: The level of this LogResponse.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level: str):
        """Sets the level of this LogResponse.

        Log level  # noqa: E501

        :param level: The level of this LogResponse.
        :type level: str
        """
        allowed_values = ["info", "warning", "error", "fatal"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def data(self) -> str:
        """Gets the data of this LogResponse.


        :return: The data of this LogResponse.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this LogResponse.


        :param data: The data of this LogResponse.
        :type data: str
        """

        self._data = data
