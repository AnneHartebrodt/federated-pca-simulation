# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.swagger_server.models.base_model_ import Model
from server.swagger_server import util


class StatusResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, status: str=None, sync_id: int=None, data: str=None):  # noqa: E501
        """StatusResponse - a model defined in Swagger

        :param id: The id of this StatusResponse.  # noqa: E501
        :type id: str
        :param status: The status of this StatusResponse.  # noqa: E501
        :type status: str
        :param sync_id: The sync_id of this StatusResponse.  # noqa: E501
        :type sync_id: int
        :param data: The data of this StatusResponse.  # noqa: E501
        :type data: str
        """
        self.swagger_types = {
            'id': str,
            'status': str,
            'sync_id': int,
            'data': str
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'sync_id': 'syncId',
            'data': 'data'
        }

        self._id = id
        self._status = status
        self._sync_id = sync_id
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'StatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StatusResponse of this StatusResponse.  # noqa: E501
        :rtype: StatusResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this StatusResponse.

        Docker container id  # noqa: E501

        :return: The id of this StatusResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this StatusResponse.

        Docker container id  # noqa: E501

        :param id: The id of this StatusResponse.
        :type id: str
        """

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this StatusResponse.

        init - init state waiting - waiting for command sync - waiting for data from slaves, or to transmit data towards master broadcast - waiting to send data to slaves. Get data should follow. running - running action paused - paused action error - error state finished - finished action   # noqa: E501

        :return: The status of this StatusResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this StatusResponse.

        init - init state waiting - waiting for command sync - waiting for data from slaves, or to transmit data towards master broadcast - waiting to send data to slaves. Get data should follow. running - running action paused - paused action error - error state finished - finished action   # noqa: E501

        :param status: The status of this StatusResponse.
        :type status: str
        """
        allowed_values = ["init", "waiting", "sync", "broadcast", "running", "paused", "error", "finished"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sync_id(self) -> int:
        """Gets the sync_id of this StatusResponse.

        Current sync Id if applicable  # noqa: E501

        :return: The sync_id of this StatusResponse.
        :rtype: int
        """
        return self._sync_id

    @sync_id.setter
    def sync_id(self, sync_id: int):
        """Sets the sync_id of this StatusResponse.

        Current sync Id if applicable  # noqa: E501

        :param sync_id: The sync_id of this StatusResponse.
        :type sync_id: int
        """

        self._sync_id = sync_id

    @property
    def data(self) -> str:
        """Gets the data of this StatusResponse.

        Additional data to pass back to controller if needed. E.q. when error state, data will contain error details  # noqa: E501

        :return: The data of this StatusResponse.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this StatusResponse.

        Additional data to pass back to controller if needed. E.q. when error state, data will contain error details  # noqa: E501

        :param data: The data of this StatusResponse.
        :type data: str
        """

        self._data = data
